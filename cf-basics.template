{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description":              "Me playing around with Cloud Formation",
  "Metadata":                 {
    "Instances": {
      "Description": "Information about the instances"
    },
    "Databases": {
      "Description": "Information about the databases"
    }
  },
  "Parameters":               {
    "KeyName":      {
      "Description":           "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type":                  "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "EnvType":      {
      "Description":           "Environment type.",
      "Default":               "test",
      "Type":                  "String",
      "AllowedValues":         [ "prod", "test" ],
      "ConstraintDescription": "specify prod or test."
    },
    "InstanceType": {
      "Description":           "WebServer EC2 instance type",
      "Type":                  "String",
      "Default":               "t2.micro",
      "AllowedValues":         [ "t2.micro" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation":  {
      "Description":           " The IP address range that can be used to SSH to the EC2 instances",
      "Type":                  "String",
      "MinLength":             "9",
      "MaxLength":             "18",
      "Default":               "0.0.0.0/0",
      "AllowedPattern":        "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings":                 {
    "RegionMap": {
      "us-east-1": { "64": "ami-e3106686" },
      "us-west-1": { "64": "ami-cd3aff89" },
      "us-west-2": { "64": "ami-9ff7e8af" }
    }
  },
  "Conditions":               {
    "CreateProdResources": { "Fn::Equals": [ { "Ref": "EnvType" }, "prod" ] }
  },
  "Resources":                {
    "myVPC":                                {
      "Type":       "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "mySubnet":                             {
      "Type":       "AWS::EC2::Subnet",
      "Properties": {
        "VpcId":            { "Ref": "myVPC" },
        "CidrBlock":        "10.0.0.0/24",
        "AvailabilityZone": "us-west-2a"
      }
    },
    "InternetGateway":                      {
      "Type":       "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },
    "AttachGateway":                        {
      "Type":       "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId":             { "Ref": "myVPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "RouteTable":                           {
      "Type":       "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "myVPC" },
        "Tags":  [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },

    "Route":                                {
      "Type":       "AWS::EC2::Route",
      "DependsOn":  "AttachGateway",
      "Properties": {
        "RouteTableId":         { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId":            { "Ref": "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation":          {
      "Type":       "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId":     { "Ref": "mySubnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },

    "NetworkAcl":                           {
      "Type":       "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "myVPC" },
        "Tags":  [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },

    "InboundHTTPNetworkAclEntry":           {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "100",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "false",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "80", "To": "80" }
      }
    },

    "InboundSSHNetworkAclEntry":            {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "101",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "false",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "22", "To": "22" }
      }
    },

    "InboundResponsePortsNetworkAclEntry":  {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "102",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "false",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "1024", "To": "65535" }
      }
    },

    "OutBoundHTTPNetworkAclEntry":          {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "100",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "true",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "80", "To": "80" }
      }
    },

    "OutBoundHTTPSNetworkAclEntry":         {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "101",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "true",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "443", "To": "443" }
      }
    },

    "OutBoundResponsePortsNetworkAclEntry": {
      "Type":       "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber":   "102",
        "Protocol":     "6",
        "RuleAction":   "allow",
        "Egress":       "true",
        "CidrBlock":    "0.0.0.0/0",
        "PortRange":    { "From": "1024", "To": "65535" }
      }
    },

    "SubnetNetworkAclAssociation":          {
      "Type":       "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId":     { "Ref": "mySubnet" },
        "NetworkAclId": { "Ref": "NetworkAcl" }
      }
    },

    "WebServerInstance":                    {
      "Type":       "AWS::EC2::Instance",
      "DependsOn":  "InternetGateway",
      "Properties": {
        "InstanceType":      { "Ref": "InstanceType" },
        "ImageId":           { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "64" ] },
        "KeyName":           { "Ref": "KeyName" },
        "NetworkInterfaces": [
          {
            "GroupSet":                 [ { "Ref": "WebServerSecurityGroup" } ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex":              "0",
            "DeleteOnTermination":      "true",
            "SubnetId":                 { "Ref": "mySubnet" }
          }
        ]
      },
      "Metadata":   {
        "Comment":                   "Install a simple PHP application",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd": [ ],
                "php":   [ ]
              }
            },
            "files":    {
              "/var/www/html/index.php":                 {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<?php\n",
                      "echo '<h1>AWS CloudFormation sample PHP application</h1>';\n",
                      "?>\n"
                    ]
                  ]
                },
                "mode":    "000644",
                "owner":   "apache",
                "group":   "apache"
              },
              "/etc/cfn/cfn-hup.conf":                   {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode":    "000400",
                "owner":   "root",
                "group":   "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r WebServerInstance ",
                      " --region     ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "httpd":    {
                  "enabled":       "true",
                  "ensureRunning": "true"
                },
                "sendmail": {
                  "enabled":       "false",
                  "ensureRunning": "false"
                }
              }
            }
          }
        }
      }
    },
    "WebServerSecurityGroup":               {
      "Type":       "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription":     "Enable HTTP access via port 80",
        "VpcId":                { "Ref": "myVPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SSHLocation" } },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ]
      }
    }
  },
  "Outputs":                  {
    "WebsiteURL": {
      "Description": "URL for newly created LAMP stack",
      "Value":       {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "WebServerInstance",
                "PublicIp"
              ]
            }
          ]
        ]
      }
    }
  }
}
